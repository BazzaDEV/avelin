name: Release

concurrency:
  group: 'release-${{ github.ref }}' # Groups runs by the branch reference
  cancel-in-progress: false # Queues new runs instead of canceling

on:
  push:
    branches:
      - main

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.determine_version.outputs.new_version }}
    permissions:
      contents: write
      packages: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          architecture: 'x64'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Determine next version
        id: determine_version
        run: |
          NEW_VERSION=$(pnpm release --ci --release-version | tail -n1)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build_images:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: prepare
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - app: web
            dockerfile: ./apps/web/Dockerfile
          - app: api
            dockerfile: ./apps/api/Dockerfile
          - app: sync
            dockerfile: ./apps/sync/Dockerfile
          - app: migrate
            dockerfile: ./packages/database/Dockerfile

    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push ${{ matrix.app }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            ghcr.io/avelinapp/${{ matrix.app }}:latest
            ghcr.io/avelinapp/${{ matrix.app }}:${{ needs.prepare.outputs.new_version }}
            ghcr.io/avelinapp/${{ matrix.app }}:v${{ needs.prepare.outputs.new_version }}
          build-args: |
            NEXT_PUBLIC_APP_URL=https://avelin.app
            NEXT_PUBLIC_API_URL=https://api.avelin.app
            NEXT_PUBLIC_SYNC_URL=wss://sync.avelin.app
            NEXT_PUBLIC_POSTHOG_KEY=phc_ClqyvBT8tnlp26PQhvbWZHuSMvrn6gq0CZEqfzwI3JC
          platforms: linux/amd64

  update_iac:
    name: Update IaC Manifests
    runs-on: ubuntu-latest
    needs: [prepare, build_images]
    permissions:
      contents: write

    steps:
      - name: Checkout IaC repo
        uses: actions/checkout@v4
        with:
          repository: bazzalabs/orion
          token: ${{ secrets.GH_BAZZALABS_ORION_SECRET }}
          fetch-depth: 0
          path: iac

      - name: Update K8s manifests
        working-directory: iac
        run: |
          VERSION=v${{ needs.prepare.outputs.new_version }}
          apps=("web" "api" "sync")
          manifests_dir="gitops/cluster-apps/avelin"
          for app in "${apps[@]}"; do
            manifest="$manifests_dir/$app/${app}-deploy.yaml"
            if [ -f "$manifest" ]; then
              echo "Updating image tag in $manifest to $VERSION"
              yq e -i ".spec.template.spec.containers[].image = \"ghcr.io/avelinapp/$app:$VERSION\"" "$manifest"
            else
              echo "Manifest file $manifest not found!"
              exit 1
            fi
          done

          manifest="$manifests_dir/shared/db-migration-job.yaml"
          if [ -f "$manifest" ]; then
            echo "Updating image tag in $manifest to $VERSION"
            yq e -i ".spec.template.spec.containers[].image = \"ghcr.io/avelinapp/migrate:$VERSION\"" "$manifest"
          else
            echo "Manifest file $manifest not found!"
            exit 1
          fi

      - name: Commit and Push IaC changes
        working-directory: iac
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add .
          git commit -m "chore: update manifests to v${{ needs.prepare.outputs.new_version }}"
          git push

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [update_iac]
    permissions:
      contents: write

    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          architecture: 'x64'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Create GitHub release
        run: pnpm release --ci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
